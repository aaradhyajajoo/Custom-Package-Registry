{
  analyzedAt: '2022-11-15T15:28:15.242Z',
  collected: {
    metadata: {
      name: 'browserify',
      scope: 'unscoped',
      version: '17.0.0',
      description: 'browser-side require() the node way',
      keywords: [Array],
      date: '2020-10-10T09:33:23.702Z',
      author: [Object],
      publisher: [Object],
      maintainers: [Array],
      repository: [Object],
      links: [Object],
      license: 'MIT',
      dependencies: [Object],
      devDependencies: [Object],
      releases: [Array],
      hasTestScript: true,
      readme: '# browserify\n' +
        '\n' +
        "`require('modules')` in the browser\n" +
        '\n' +
        'Use a [node](http://nodejs.org)-style `require()` to organize your browser code\n' +
        'and load modules installed by [npm](https://www.npmjs.com).\n' +
        '\n' +
        'browserify will recursively analyze all the `require()` calls in your app in\n' +
        'order to build a bundle you can serve up to the browser in a single `<script>`\n' +
        'tag.\n' +
        '\n' +
        '[![build status](https://img.shields.io/travis/browserify/browserify/master.svg)](https://travis-ci.org/browserify/browserify)\n' +
        '\n' +
        '![browserify!](./assets/logo.png)\n' +
        '\n' +
        '# getting started\n' +
        '\n' +
        "If you're new to browserify, check out the\n" +
        '[browserify handbook](https://github.com/browserify/browserify-handbook)\n' +
        'and the resources on [browserify.org](http://browserify.org/).\n' +
        '\n' +
        '# example\n' +
        '\n' +
        'Whip up a file, `main.js` with some `require()`s in it. You can use relative\n' +
        "paths like `'./foo.js'` and `'../lib/bar.js'` or module paths like `'gamma'`\n" +
        'that will search `node_modules/` using\n' +
        "[node's module lookup algorithm](https://github.com/browserify/resolve).\n" +
        '\n' +
        '``` js\n' +
        "var foo = require('./foo.js');\n" +
        "var bar = require('../lib/bar.js');\n" +
        "var gamma = require('gamma');\n" +
        '\n' +
        "var elem = document.getElementById('result');\n" +
        "var x = foo(100) + bar('baz');\n" +
        'elem.textContent = gamma(x);\n' +
        '```\n' +
        '\n' +
        'Export functionality by assigning onto `module.exports` or `exports`:\n' +
        '\n' +
        '``` js\n' +
        'module.exports = function (n) { return n * 111 }\n' +
        '```\n' +
        '\n' +
        'Now just use the `browserify` command to build a bundle starting at `main.js`:\n' +
        '\n' +
        '```\n' +
        '$ browserify main.js > bundle.js\n' +
        '```\n' +
        '\n' +
        'All of the modules that `main.js` needs are included in the `bundle.js` from a\n' +
        'recursive walk of the `require()` graph using\n' +
        '[required](https://github.com/defunctzombie/node-required).\n' +
        '\n' +
        'To use this bundle, just toss a `<script src="bundle.js"></script>` into your\n' +
        'html!\n' +
        '\n' +
        '# install\n' +
        '\n' +
        'With [npm](https://www.npmjs.com/) do:\n' +
        '\n' +
        '```\n' +
        'npm install -g browserify\n' +
        '```\n' +
        '\n' +
        '# usage\n' +
        '\n' +
        '```\n' +
        'Usage: browserify [entry files] {OPTIONS}\n' +
        '\n' +
        'Standard Options:\n' +
        '\n' +
        '    --outfile, -o  Write the browserify bundle to this file.\n' +
        '                   If unspecified, browserify prints to stdout.\n' +
        '\n' +
        '    --require, -r  A module name or file to bundle.require()\n' +
        '                   Optionally use a colon separator to set the target.\n' +
        '\n' +
        '      --entry, -e  An entry point of your app\n' +
        '\n' +
        '     --ignore, -i  Replace a file with an empty stub. Files can be globs.\n' +
        '\n' +
        '    --exclude, -u  Omit a file from the output bundle. Files can be globs.\n' +
        '\n' +
        '   --external, -x  Reference a file from another bundle. Files can be globs.\n' +
        '\n' +
        '  --transform, -t  Use a transform module on top-level files.\n' +
        '\n' +
        '    --command, -c  Use a transform command on top-level files.\n' +
        '\n' +
        '  --standalone -s  Generate a UMD bundle for the supplied export name.\n' +
        '                   This bundle works with other module systems and sets the name\n' +
        '                   given as a window global if no module system is found.\n' +
        '\n' +
        '       --debug -d  Enable source maps that allow you to debug your files\n' +
        '                   separately.\n' +
        '\n' +
        '       --help, -h  Show this message\n' +
        '\n' +
        'For advanced options, type `browserify --help advanced`.\n' +
        '\n' +
        'Specify a parameter.\n' +
        '```\n' +
        '\n' +
        '```\n' +
        'Advanced Options:\n' +
        '\n' +
        '  --insert-globals, --ig, --fast    [default: false]\n' +
        '\n' +
        '    Skip detection and always insert definitions for process, global,\n' +
        '    __filename, and __dirname.\n' +
        '\n' +
        '    benefit: faster builds\n' +
        '    cost: extra bytes\n' +
        '\n' +
        '  --insert-global-vars, --igv\n' +
        '\n' +
        '    Comma-separated list of global variables to detect and define.\n' +
        '    Default: __filename,__dirname,process,Buffer,global\n' +
        '\n' +
        '  --detect-globals, --dg            [default: true]\n' +
        '\n' +
        '    Detect the presence of process, global, __filename, and __dirname and define\n' +
        '    these values when present.\n' +
        '\n' +
        '    benefit: npm modules more likely to work\n' +
        '    cost: slower builds\n' +
        '\n' +
        '  --ignore-missing, --im            [default: false]\n' +
        '\n' +
        "    Ignore `require()` statements that don't resolve to anything.\n" +
        '\n' +
        '  --noparse=FILE\n' +
        '\n' +
        "    Don't parse FILE at all. This will make bundling much, much faster for giant\n" +
        '    libs like jquery or threejs.\n' +
        '\n' +
        '  --no-builtins\n' +
        '\n' +
        '    Turn off builtins. This is handy when you want to run a bundle in node which\n' +
        '    provides the core builtins.\n' +
        '\n' +
        '  --no-commondir\n' +
        '\n' +
        '    Turn off setting a commondir. This is useful if you want to preserve the\n' +
        '    original paths that a bundle was generated with.\n' +
        '\n' +
        '  --no-bundle-external\n' +
        '\n' +
        '    Turn off bundling of all external modules. This is useful if you only want\n' +
        '    to bundle your local files.\n' +
        '\n' +
        '  --bare\n' +
        '\n' +
        '    Alias for both --no-builtins, --no-commondir, and sets --insert-global-vars\n' +
        '    to just "__filename,__dirname". This is handy if you want to run bundles in\n' +
        '    node.\n' +
        '\n' +
        '  --no-browser-field, --no-bf\n' +
        '\n' +
        '    Turn off package.json browser field resolution. This is also handy if you\n' +
        '    need to run a bundle in node.\n' +
        '\n' +
        '  --transform-key\n' +
        '\n' +
        '    Instead of the default package.json#browserify#transform field to list\n' +
        '    all transforms to apply when running browserify, a custom field, like, e.g.\n' +
        '    package.json#browserify#production or package.json#browserify#staging\n' +
        '    can be used, by for example running:\n' +
        '    * `browserify index.js --transform-key=production > bundle.js`\n' +
        '    * `browserify index.js --transform-key=staging > bundle.js`\n' +
        '\n' +
        '  --node\n' +
        '\n' +
        '    Alias for --bare and --no-browser-field.\n' +
        '\n' +
        '  --full-paths\n' +
        '\n' +
        '    Turn off converting module ids into numerical indexes. This is useful for\n' +
        '    preserving the original paths that a bundle was generated with.\n' +
        '\n' +
        '  --deps\n' +
        '\n' +
        '    Instead of standard bundle output, print the dependency array generated by\n' +
        '    module-deps.\n' +
        '\n' +
        '  --no-dedupe\n' +
        '\n' +
        '    Turn off deduping.\n' +
        '\n' +
        '  --list\n' +
        '\n' +
        '    Print each file in the dependency graph. Useful for makefiles.\n' +
        '\n' +
        '  --extension=EXTENSION\n' +
        '\n' +
        '    Consider files with specified EXTENSION as modules, this option can used\n' +
        '    multiple times.\n' +
        '\n' +
        '  --global-transform=MODULE, -g MODULE\n' +
        '\n' +
        '    Use a transform module on all files after any ordinary transforms have run.\n' +
        '\n' +
        '  --ignore-transform=MODULE, -it MODULE\n' +
        '\n' +
        '    Do not run certain transformations, even if specified elsewhere.\n' +
        '\n' +
        '  --plugin=MODULE, -p MODULE\n' +
        '\n' +
        '    Register MODULE as a plugin.\n' +
        '\n' +
        'Passing arguments to transforms and plugins:\n' +
        '\n' +
        '  For -t, -g, and -p, you may use subarg syntax to pass options to the\n' +
        '  transforms or plugin function as the second parameter. For example:\n' +
        '\n' +
        '    -t [ foo -x 3 --beep ]\n' +
        '\n' +
        '  will call the `foo` transform for each applicable file by calling:\n' +
        '\n' +
        '    foo(file, { x: 3, beep: true })\n' +
        '\n' +
        '```\n' +
        '\n' +
        '# compatibility\n' +
        '\n' +
        "Many [npm](https://www.npmjs.com/) modules that don't do IO will just work after being\n" +
        'browserified. Others take more work.\n' +
        '\n' +
        'Many node built-in modules have been wrapped to work in the browser, but only\n' +
        'when you explicitly `require()` or use their functionality.\n' +
        '\n' +
        'When you `require()` any of these modules, you will get a browser-specific shim:\n' +
        '\n' +
        '* [assert](https://www.npmjs.com/package/assert)\n' +
        '* [buffer](https://www.npmjs.com/package/buffer)\n' +
        '* [console](https://www.npmjs.com/package/console-browserify)\n' +
        '* [constants](https://www.npmjs.com/package/constants-browserify)\n' +
        '* [crypto](https://www.npmjs.com/package/crypto-browserify)\n' +
        '* [domain](https://www.npmjs.com/package/domain-browser)\n' +
        '* [events](https://www.npmjs.com/package/events)\n' +
        '* [http](https://www.npmjs.com/package/stream-http)\n' +
        '* [https](https://www.npmjs.com/package/https-browserify)\n' +
        '* [os](https://www.npmjs.com/package/os-browserify)\n' +
        '* [path](https://www.npmjs.com/package/path-browserify)\n' +
        '* [punycode](https://www.npmjs.com/package/punycode)\n' +
        '* [querystring](https://www.npmjs.com/package/querystring-es3)\n' +
        '* [stream](https://www.npmjs.com/package/stream-browserify)\n' +
        '* [string_decoder](https://www.npmjs.com/package/string_decoder)\n' +
        '* [timers](https://www.npmjs.com/package/timers-browserify)\n' +
        '* [tty](https://www.npmjs.com/package/tty-browserify)\n' +
        '* [url](https://www.npmjs.com/package/url)\n' +
        '* [util](https://www.npmjs.com/package/util)\n' +
        '* [vm](https://www.npmjs.com/package/vm-browserify)\n' +
        '* [zlib](https://www.npmjs.com/package/browserify-zlib)\n' +
        '\n' +
        'Additionally, if you use any of these variables, they\n' +
        '[will be defined](https://github.com/browserify/insert-module-globals)\n' +
        'in the bundled output in a browser-appropriate way:\n' +
        '\n' +
        '* [process](https://www.npmjs.com/package/process)\n' +
        '* [Buffer](https://www.npmjs.com/package/buffer)\n' +
        '* global - top-level scope object (window)\n' +
        '* __filename - file path of the currently executing file\n' +
        '* __dirname - directory path of the currently executing file\n' +
        '\n' +
        '# more examples\n' +
        '\n' +
        '## external requires\n' +
        '\n' +
        'You can just as easily create a bundle that will export a `require()` function so\n' +
        "you can `require()` modules from another script tag. Here we'll create a\n" +
        '`bundle.js` with the [through](https://www.npmjs.com/package/through)\n' +
        'and [duplexer](https://www.npmjs.com/package/duplexer) modules.\n' +
        '\n' +
        '```\n' +
        '$ browserify -r through -r duplexer -r ./my-file.js:my-module > bundle.js\n' +
        '```\n' +
        '\n' +
        'Then in your page you can do:\n' +
        '\n' +
        '``` html\n' +
        '<script src="bundle.js"></script>\n' +
        '<script>\n' +
        "  var through = require('through');\n" +
        "  var duplexer = require('duplexer');\n" +
        "  var myModule = require('my-module');\n" +
        '  /* ... */\n' +
        '</script>\n' +
        '```\n' +
        '\n' +
        '## external source maps\n' +
        '\n' +
        'If you prefer the source maps be saved to a separate `.js.map` source map file, you may use\n' +
        "[exorcist](https://github.com/thlorenz/exorcist) in order to achieve that. It's as simple as:\n" +
        '\n' +
        '```\n' +
        '$ browserify main.js --debug | exorcist bundle.js.map > bundle.js\n' +
        '```\n' +
        '\n' +
        'Learn about additional options [here](https://github.com/thlorenz/exorcist#usage).\n' +
        '\n' +
        '## multiple bundles\n' +
        '\n' +
        'If browserify finds a `require`d function already defined in the page scope, it\n' +
        "will fall back to that function if it didn't find any matches in its own set of\n" +
        'bundled modules.\n' +
        '\n' +
        'In this way, you can use browserify to split up bundles among multiple pages to\n' +
        'get the benefit of caching for shared, infrequently-changing modules, while\n' +
        'still being able to use `require()`. Just use a combination of `--external` and\n' +
        '`--require` to factor out common dependencies.\n' +
        '\n' +
        'For example, if a website with 2 pages, `beep.js`:\n' +
        '\n' +
        '``` js\n' +
        "var robot = require('./robot.js');\n" +
        "console.log(robot('beep'));\n" +
        '```\n' +
        '\n' +
        'and `boop.js`:\n' +
        '\n' +
        '``` js\n' +
        "var robot = require('./robot.js');\n" +
        "console.log(robot('boop'));\n" +
        '```\n' +
        '\n' +
        'both depend on `robot.js`:\n' +
        '\n' +
        '``` js\n' +
        'module.exports = function (s) { return s.toUpperCase() '... 16837 more characters
    },
    npm: { downloads: [Array], starsCount: 922 },
    github: {
      homepage: 'http://browserify.org/',
      starsCount: 14258,
      forksCount: 1245,
      subscribersCount: 292,
      issues: [Object],
      contributors: [Array],
      commits: [Array],
      statuses: [Array]
    },
    source: {
      files: [Object],
      badges: [Array],
      outdatedDependencies: [Object]
    }
  },
  evaluation: {
    quality: {
      carefulness: 0.7899999999999999,
      tests: 0.6,
      health: 0.625,
      branding: 0.15
    },
    popularity: {
      communityInterest: 16817,
      downloadsCount: 9473827.666666666,
      downloadsAcceleration: 15368.015810502286,
      dependentsCount: 0
    },
    maintenance: {
      releasesFrequency: 0.7591609589041095,
      commitsFrequency: 0.011506849315068493,
      openIssues: 1,
      issuesDistribution: 0
    }
  },
  score: {
    final: 0.6964007846895017,
    detail: {
      quality: 0.8763486407014901,
      popularity: 0.6771229910018363,
      maintenance: 0.5614375589383198
    }
  }
}
